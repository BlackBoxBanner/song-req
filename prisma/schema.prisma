generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  Domain      Domain?
  LiveSession LiveSession?
  Song        Song[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Domain {
  id       String   @unique @default(uuid())
  url      String
  userId   String   @unique
  createAt DateTime @default(now())

  User User @relation(fields: [userId], references: [id])
}

model LiveSession {
  id      String  @unique @default(uuid())
  request Boolean @default(true)
  limit   Int     @default(10)

  userId String @unique
  User   User   @relation(fields: [userId], references: [id])
  Song   Song[]
}

model Song {
  id       String   @unique @default(uuid())
  title    String
  done     Boolean  @default(false)
  delete   Boolean  @default(false)
  createAt DateTime @default(now())

  userId String
  User   User   @relation(fields: [userId], references: [id])

  sessionId String
  session   LiveSession @relation(fields: [sessionId], references: [id])
}
