generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  LiveSession     LiveSession[]
  LiveParticipant LiveParticipant[]

  @@map("users")
}

model LiveSession {
  id           String   @id @default(cuid())
  name         String
  limit        Int      @default(10)
  live         Boolean  @default(false)
  allowRequest Boolean  @default(false)
  createBy     String
  default      Boolean  @default(false)
  route        String   @unique
  createAt     DateTime @default(now())

  User         User                        @relation(fields: [createBy], references: [id], onDelete: Cascade)
  participants LiveParticipantOnSessions[]
  Song         Song[]
}

model LiveParticipant {
  id       String   @id @default(cuid())
  userId   String
  createAt DateTime @default(now())

  User     User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions LiveParticipantOnSessions[]
}

// Join table for many-to-many relationship
model LiveParticipantOnSessions {
  liveSession   LiveSession @relation(fields: [liveSessionId], references: [id], onDelete: Cascade)
  liveSessionId String

  liveParticipant   LiveParticipant @relation(fields: [liveParticipantId], references: [id], onDelete: Cascade)
  liveParticipantId String

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([liveSessionId, liveParticipantId])
}

model Song {
  id            String   @unique @default(uuid())
  title         String
  done          Boolean  @default(false)
  createAt      DateTime @default(now())
  liveSessionId String

  LiveSession LiveSession @relation(fields: [liveSessionId], references: [id], onDelete: Cascade)
}
